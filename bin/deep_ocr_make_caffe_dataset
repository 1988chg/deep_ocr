#! /usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function


import argparse
from argparse import RawTextHelpFormatter
import fnmatch
import os
import cv2
import json
import random
import numpy as np
import shutil
from deep_ocr.langs.utils import get_lang_chars


if __name__ == "__main__":

    description = '''
    '''

    parser = argparse.ArgumentParser(
        description=description, formatter_class=RawTextHelpFormatter)
    parser.add_argument('--out_caffe_dir', dest='out_caffe_dir',
                        default=None, required=True,
                        help='write a caffe dir')
    parser.add_argument('--font_dir', dest='font_dir',
                        default=None, required=True,
                        help='font dir to to produce images')
    parser.add_argument('--test_ratio', dest='test_ratio',
                        default=0.3, required=False,
                        help='test dataset size')
    parser.add_argument('--width', dest='width',
                        default=None, required=True,
                        help='width')
    parser.add_argument('--height', dest='height',
                        default=None, required=True,
                        help='height')
    parser.add_argument('--no_crop', dest='no_crop',
                        default=False, required=False,
                        help='', action='store_true')
    parser.add_argument('--margin', dest='margin',
                        default=0, required=False,
                        help='', )
    parser.add_argument('--langs', dest='langs',
                        default="chi_sim", required=True,
                        help='deep_ocr.langs.*, e.g. chi_sim, chi_tra, digits...')
    options = parser.parse_args()

    out_caffe_dir = os.path.expanduser(options.out_caffe_dir)
    font_dir = os.path.expanduser(options.font_dir)
    test_ratio = float(options.test_ratio)
    width = options.width
    height = options.height
    no_crop = options.no_crop
    margin = int(options.margin)
    langs = options.langs

    images_dir = os.path.join(out_caffe_dir, "images")
    if os.path.isdir(images_dir):
        shutil.rmtree(images_dir)
    os.makedirs(images_dir)

    path_train_list = os.path.join(out_caffe_dir, "train.txt")
    path_test_list = os.path.join(out_caffe_dir, "test.txt")




    langs = options.langs
    out_caffe_dir = os.path.expanduser(options.out_caffe_dir)
    font_dir = os.path.expanduser(options.font_dir)
    tmp_font_paths = os.listdir(font_dir)

    width = int(options.width)
    height = int(options.height)
    need_crop = not options.no_crop
    prefix = options.prefix
    train_ratio = float(options.train_ratio)
    margin = int(options.margin)

    dest_train_dir = os.path.join(dest_dir, "train")
    dest_test_dir = os.path.join(dest_dir, "test")

    prefix_train_dir = os.path.join(prefix, "train")
    prefix_test_dir = os.path.join(prefix, "test")

    prefix_index_train_file = os.path.join(dest_dir, "train.txt")
    prefix_index_test_file = os.path.join(dest_dir, "test.txt")

    y_tag_json_file = os.path.join(dest_dir, "y_tag.json")
    y_tag_text_file = os.path.join(dest_dir, "y_tag.txt")

    if os.path.isdir(dest_dir):
        shutil.rmtree(dest_dir)
    if not os.path.isdir(dest_dir):
        os.makedirs(dest_dir)
    if not os.path.isdir(dest_train_dir):
        os.makedirs(dest_train_dir)
    if not os.path.isdir(dest_test_dir):
        os.makedirs(dest_test_dir)

    lang_chars = "".join(list(set(lang_chars)))

    font_paths = []
    for tmp_font_path in tmp_font_paths:
        if tmp_font_path.lower().endswith(".ttf") or \
                tmp_font_path.lower().endswith(".ttc"):
            path_font = os.path.join(font_dir, tmp_font_path)
            if os.path.isfile(path_font):
                if check_if_good_font(lang_chars, path_font):
                    font_paths.append(path_font)
#                else:
#                    os.remove(path_font)
            else:
                print("cannot find ", path_font)

    print("=" * 60)
    print("correct fonts:")
    for path_font in font_paths:
        print(path_font)

    print("total chinese character number=", len(lang_chars))
    print("font number=", len(font_paths))

    train_index_list = []
    test_index_list = []

    max_train_i = int(train_ratio * len(font_paths))

    y_to_tag = {}

    for j, font_path in enumerate(font_paths):
        train_or_test = "train"
        if j >= max_train_i:
            train_or_test = "test"
        for i, char in enumerate(lang_chars):
            if i not in y_to_tag:
                y_to_tag[i] = char
            prefix_char_dir = os.path.join(
                train_or_test,
                "{0}".format(i),
                "{0}_{1}.jpg".format(j, os.path.basename(font_path)))
            if train_or_test == "train":
                train_index_list.append((prefix_char_dir, i))
            else:
                test_index_list.append((prefix_char_dir, i))
            char_dir = os.path.join(dest_dir, train_or_test, "{0}".format(i))
            if not os.path.isdir(char_dir):
                os.makedirs(char_dir)
            path_img = os.path.join(char_dir, "{0}_{1}.jpg".format(j,
                                    os.path.basename(font_path)))
            write_image(
                path_img,
                char,
                font_path,
                width, height,
                need_crop,
                margin)

    h_y_tag_json_file = open(y_tag_json_file, "w+")
    json.dump(y_to_tag, h_y_tag_json_file)

    h_y_tag_text_file = open(y_tag_text_file, "w+")
    for key in y_to_tag:
        h_y_tag_text_file.write("%d %s\n" % (key, y_to_tag[key].encode("utf-8")))
    h_y_tag_text_file.close()

    fout = open(prefix_index_train_file, "w+")
    for item in train_index_list:
        fout.write("%s %d\n" % (item[0], item[1]))
    fout.close()

    fout = open(prefix_index_test_file, "w+")
    for item in test_index_list:
        fout.write("%s %d\n" % (item[0], item[1]))
    fout.close()


#    y_to_tag = {}
#    path_y_to_tag = os.path.join(dest_dir, "y_to_tag.json")
#    path_y_to_file = open(os.path.join(dest_dir, "y_to_tag.txt"), "w+")
#    for i, char in enumerate(lang_chars):
#        
#        
#        path_y_to_file.write("%d %s\n" % (i, char.encode("utf-8")))
#        y_to_tag[i] = char
#        char_dir = os.path.join(dest_dir, "{0}".format(i))
#        if not os.path.isdir(char_dir):
#            os.makedirs(char_dir)
#        for j, font_path in enumerate(font_paths):
#            path_img = os.path.join(char_dir, "{0}_{1}.jpg".format(j,
#                                    os.path.basename(font_path)))
#            write_image(
#                path_img,
#                char,
#                font_path,
#                width, height,
#                need_crop)         
#  
#    path_y_to_file.close()
#
#    json.dump(y_to_tag, open(path_y_to_tag, "w+"))
